// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: buchain/exchange/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgExchangeToken struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Receiver      string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Denom         string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount        string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	ExchangeToken string `protobuf:"bytes,5,opt,name=exchangeToken,proto3" json:"exchangeToken,omitempty"`
}

func (m *MsgExchangeToken) Reset()         { *m = MsgExchangeToken{} }
func (m *MsgExchangeToken) String() string { return proto.CompactTextString(m) }
func (*MsgExchangeToken) ProtoMessage()    {}
func (*MsgExchangeToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_041446b6385b0828, []int{0}
}
func (m *MsgExchangeToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExchangeToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExchangeToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExchangeToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExchangeToken.Merge(m, src)
}
func (m *MsgExchangeToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgExchangeToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExchangeToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExchangeToken proto.InternalMessageInfo

func (m *MsgExchangeToken) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgExchangeToken) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *MsgExchangeToken) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgExchangeToken) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *MsgExchangeToken) GetExchangeToken() string {
	if m != nil {
		return m.ExchangeToken
	}
	return ""
}

type MsgExchangeTokenResponse struct {
}

func (m *MsgExchangeTokenResponse) Reset()         { *m = MsgExchangeTokenResponse{} }
func (m *MsgExchangeTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExchangeTokenResponse) ProtoMessage()    {}
func (*MsgExchangeTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_041446b6385b0828, []int{1}
}
func (m *MsgExchangeTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExchangeTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExchangeTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExchangeTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExchangeTokenResponse.Merge(m, src)
}
func (m *MsgExchangeTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExchangeTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExchangeTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExchangeTokenResponse proto.InternalMessageInfo

type MsgCreateExchangeRate struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index      string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	Rate       uint64 `protobuf:"varint,3,opt,name=rate,proto3" json:"rate,omitempty"`
	Multiplier uint64 `protobuf:"varint,4,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
}

func (m *MsgCreateExchangeRate) Reset()         { *m = MsgCreateExchangeRate{} }
func (m *MsgCreateExchangeRate) String() string { return proto.CompactTextString(m) }
func (*MsgCreateExchangeRate) ProtoMessage()    {}
func (*MsgCreateExchangeRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_041446b6385b0828, []int{2}
}
func (m *MsgCreateExchangeRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateExchangeRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateExchangeRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateExchangeRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateExchangeRate.Merge(m, src)
}
func (m *MsgCreateExchangeRate) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateExchangeRate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateExchangeRate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateExchangeRate proto.InternalMessageInfo

func (m *MsgCreateExchangeRate) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateExchangeRate) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *MsgCreateExchangeRate) GetRate() uint64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *MsgCreateExchangeRate) GetMultiplier() uint64 {
	if m != nil {
		return m.Multiplier
	}
	return 0
}

type MsgCreateExchangeRateResponse struct {
}

func (m *MsgCreateExchangeRateResponse) Reset()         { *m = MsgCreateExchangeRateResponse{} }
func (m *MsgCreateExchangeRateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateExchangeRateResponse) ProtoMessage()    {}
func (*MsgCreateExchangeRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_041446b6385b0828, []int{3}
}
func (m *MsgCreateExchangeRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateExchangeRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateExchangeRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateExchangeRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateExchangeRateResponse.Merge(m, src)
}
func (m *MsgCreateExchangeRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateExchangeRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateExchangeRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateExchangeRateResponse proto.InternalMessageInfo

type MsgUpdateExchangeRate struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index      string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	Rate       uint64 `protobuf:"varint,3,opt,name=rate,proto3" json:"rate,omitempty"`
	Multiplier uint64 `protobuf:"varint,4,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
}

func (m *MsgUpdateExchangeRate) Reset()         { *m = MsgUpdateExchangeRate{} }
func (m *MsgUpdateExchangeRate) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateExchangeRate) ProtoMessage()    {}
func (*MsgUpdateExchangeRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_041446b6385b0828, []int{4}
}
func (m *MsgUpdateExchangeRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateExchangeRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateExchangeRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateExchangeRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateExchangeRate.Merge(m, src)
}
func (m *MsgUpdateExchangeRate) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateExchangeRate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateExchangeRate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateExchangeRate proto.InternalMessageInfo

func (m *MsgUpdateExchangeRate) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateExchangeRate) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *MsgUpdateExchangeRate) GetRate() uint64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *MsgUpdateExchangeRate) GetMultiplier() uint64 {
	if m != nil {
		return m.Multiplier
	}
	return 0
}

type MsgUpdateExchangeRateResponse struct {
}

func (m *MsgUpdateExchangeRateResponse) Reset()         { *m = MsgUpdateExchangeRateResponse{} }
func (m *MsgUpdateExchangeRateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateExchangeRateResponse) ProtoMessage()    {}
func (*MsgUpdateExchangeRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_041446b6385b0828, []int{5}
}
func (m *MsgUpdateExchangeRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateExchangeRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateExchangeRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateExchangeRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateExchangeRateResponse.Merge(m, src)
}
func (m *MsgUpdateExchangeRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateExchangeRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateExchangeRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateExchangeRateResponse proto.InternalMessageInfo

type MsgDeleteExchangeRate struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index   string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgDeleteExchangeRate) Reset()         { *m = MsgDeleteExchangeRate{} }
func (m *MsgDeleteExchangeRate) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteExchangeRate) ProtoMessage()    {}
func (*MsgDeleteExchangeRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_041446b6385b0828, []int{6}
}
func (m *MsgDeleteExchangeRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteExchangeRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteExchangeRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteExchangeRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteExchangeRate.Merge(m, src)
}
func (m *MsgDeleteExchangeRate) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteExchangeRate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteExchangeRate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteExchangeRate proto.InternalMessageInfo

func (m *MsgDeleteExchangeRate) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteExchangeRate) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type MsgDeleteExchangeRateResponse struct {
}

func (m *MsgDeleteExchangeRateResponse) Reset()         { *m = MsgDeleteExchangeRateResponse{} }
func (m *MsgDeleteExchangeRateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteExchangeRateResponse) ProtoMessage()    {}
func (*MsgDeleteExchangeRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_041446b6385b0828, []int{7}
}
func (m *MsgDeleteExchangeRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteExchangeRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteExchangeRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteExchangeRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteExchangeRateResponse.Merge(m, src)
}
func (m *MsgDeleteExchangeRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteExchangeRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteExchangeRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteExchangeRateResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgExchangeToken)(nil), "buchain.exchange.MsgExchangeToken")
	proto.RegisterType((*MsgExchangeTokenResponse)(nil), "buchain.exchange.MsgExchangeTokenResponse")
	proto.RegisterType((*MsgCreateExchangeRate)(nil), "buchain.exchange.MsgCreateExchangeRate")
	proto.RegisterType((*MsgCreateExchangeRateResponse)(nil), "buchain.exchange.MsgCreateExchangeRateResponse")
	proto.RegisterType((*MsgUpdateExchangeRate)(nil), "buchain.exchange.MsgUpdateExchangeRate")
	proto.RegisterType((*MsgUpdateExchangeRateResponse)(nil), "buchain.exchange.MsgUpdateExchangeRateResponse")
	proto.RegisterType((*MsgDeleteExchangeRate)(nil), "buchain.exchange.MsgDeleteExchangeRate")
	proto.RegisterType((*MsgDeleteExchangeRateResponse)(nil), "buchain.exchange.MsgDeleteExchangeRateResponse")
}

func init() { proto.RegisterFile("buchain/exchange/tx.proto", fileDescriptor_041446b6385b0828) }

var fileDescriptor_041446b6385b0828 = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0xcf, 0xaa, 0xd3, 0x40,
	0x14, 0xc6, 0x1b, 0x9b, 0x5e, 0xf5, 0xc0, 0x85, 0xcb, 0x50, 0x25, 0x0d, 0x38, 0x95, 0x20, 0x28,
	0x82, 0x09, 0xb5, 0x6f, 0xe0, 0x1f, 0x5c, 0x75, 0x13, 0x74, 0xe3, 0x46, 0x26, 0xe9, 0x21, 0x0d,
	0x36, 0x33, 0x21, 0x33, 0x29, 0x11, 0x5f, 0xc2, 0x07, 0xf0, 0x39, 0x7c, 0x06, 0x97, 0x5d, 0xba,
	0x94, 0xf6, 0x45, 0xa4, 0x93, 0xa4, 0xa4, 0xf9, 0xa3, 0x82, 0x0b, 0x77, 0xe7, 0x9c, 0xef, 0x9b,
	0xf9, 0x7d, 0x70, 0x86, 0x81, 0x59, 0x90, 0x87, 0x1b, 0x16, 0x73, 0x0f, 0x8b, 0x70, 0xc3, 0x78,
	0x84, 0x9e, 0x2a, 0xdc, 0x34, 0x13, 0x4a, 0x90, 0x9b, 0x4a, 0x72, 0x6b, 0xc9, 0x9e, 0x77, 0xcc,
	0x75, 0x51, 0x1e, 0xb1, 0x69, 0x28, 0x64, 0x22, 0xa4, 0x17, 0x30, 0x89, 0xde, 0x6e, 0x11, 0xa0,
	0x62, 0x0b, 0x2f, 0x14, 0x31, 0xaf, 0xf4, 0x69, 0x24, 0x22, 0xa1, 0x4b, 0xef, 0x54, 0x95, 0x53,
	0xe7, 0xab, 0x01, 0x37, 0x2b, 0x19, 0xbd, 0xae, 0xee, 0x7a, 0x2b, 0x3e, 0x22, 0x27, 0x16, 0xdc,
	0x0e, 0x33, 0x64, 0x4a, 0x64, 0x96, 0xf1, 0xd0, 0x78, 0x72, 0xd7, 0xaf, 0x5b, 0x62, 0xc3, 0x9d,
	0x0c, 0x43, 0x8c, 0x77, 0x98, 0x59, 0xb7, 0xb4, 0x74, 0xee, 0xc9, 0x14, 0x26, 0x6b, 0xe4, 0x22,
	0xb1, 0xc6, 0x5a, 0x28, 0x1b, 0x72, 0x1f, 0xae, 0x58, 0x22, 0x72, 0xae, 0x2c, 0x53, 0x8f, 0xab,
	0x8e, 0x3c, 0x82, 0x6b, 0x6c, 0x42, 0xad, 0x89, 0x96, 0x2f, 0x87, 0x8e, 0x0d, 0x56, 0x3b, 0x9d,
	0x8f, 0x32, 0x15, 0x5c, 0xa2, 0xf3, 0x19, 0xee, 0xad, 0x64, 0xf4, 0xf2, 0x94, 0x0c, 0x6b, 0x87,
	0xcf, 0x14, 0xfe, 0x26, 0xfe, 0x14, 0x26, 0x31, 0x5f, 0x63, 0x51, 0x65, 0x2f, 0x1b, 0x42, 0xc0,
	0xcc, 0x98, 0x42, 0x9d, 0xdb, 0xf4, 0x75, 0x4d, 0x28, 0x40, 0x92, 0x6f, 0x55, 0x9c, 0x6e, 0x63,
	0xcc, 0x74, 0x74, 0xd3, 0x6f, 0x4c, 0x9c, 0x39, 0x3c, 0xe8, 0x85, 0xb7, 0xd2, 0xbd, 0x4b, 0xd7,
	0xff, 0x2f, 0x5d, 0x17, 0x7e, 0x4e, 0xf7, 0x46, 0xa7, 0x7b, 0x85, 0x5b, 0xfc, 0xb7, 0x74, 0x15,
	0xa9, 0x7b, 0x51, 0x4d, 0x7a, 0xfe, 0x6d, 0x0c, 0xe3, 0x95, 0x8c, 0xc8, 0x07, 0xb8, 0xbe, 0x7c,
	0x64, 0x8e, 0xdb, 0x7e, 0xe3, 0x6e, 0x7b, 0xd5, 0xf6, 0xd3, 0x3f, 0x7b, 0x6a, 0x10, 0xe1, 0x40,
	0x7a, 0xde, 0xc2, 0xe3, 0xde, 0x1b, 0xba, 0x46, 0xdb, 0xfb, 0x4b, 0x63, 0x93, 0xd7, 0xb3, 0xdd,
	0x7e, 0x5e, 0xd7, 0x38, 0xc0, 0x1b, 0x5e, 0xd9, 0x89, 0xd7, 0xb3, 0xaf, 0x7e, 0x5e, 0xd7, 0x38,
	0xc0, 0x1b, 0x5e, 0xdc, 0x8b, 0xe5, 0xf7, 0x03, 0x35, 0xf6, 0x07, 0x6a, 0xfc, 0x3c, 0x50, 0xe3,
	0xcb, 0x91, 0x8e, 0xf6, 0x47, 0x3a, 0xfa, 0x71, 0xa4, 0xa3, 0xf7, 0xb3, 0x20, 0x7f, 0x56, 0xfe,
	0x45, 0x45, 0xe3, 0xeb, 0xfa, 0x94, 0xa2, 0x0c, 0xae, 0xf4, 0xaf, 0xb2, 0xfc, 0x15, 0x00, 0x00,
	0xff, 0xff, 0x73, 0x2b, 0x48, 0x02, 0xdb, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	ExchangeToken(ctx context.Context, in *MsgExchangeToken, opts ...grpc.CallOption) (*MsgExchangeTokenResponse, error)
	CreateExchangeRate(ctx context.Context, in *MsgCreateExchangeRate, opts ...grpc.CallOption) (*MsgCreateExchangeRateResponse, error)
	UpdateExchangeRate(ctx context.Context, in *MsgUpdateExchangeRate, opts ...grpc.CallOption) (*MsgUpdateExchangeRateResponse, error)
	DeleteExchangeRate(ctx context.Context, in *MsgDeleteExchangeRate, opts ...grpc.CallOption) (*MsgDeleteExchangeRateResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ExchangeToken(ctx context.Context, in *MsgExchangeToken, opts ...grpc.CallOption) (*MsgExchangeTokenResponse, error) {
	out := new(MsgExchangeTokenResponse)
	err := c.cc.Invoke(ctx, "/buchain.exchange.Msg/ExchangeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateExchangeRate(ctx context.Context, in *MsgCreateExchangeRate, opts ...grpc.CallOption) (*MsgCreateExchangeRateResponse, error) {
	out := new(MsgCreateExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/buchain.exchange.Msg/CreateExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateExchangeRate(ctx context.Context, in *MsgUpdateExchangeRate, opts ...grpc.CallOption) (*MsgUpdateExchangeRateResponse, error) {
	out := new(MsgUpdateExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/buchain.exchange.Msg/UpdateExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteExchangeRate(ctx context.Context, in *MsgDeleteExchangeRate, opts ...grpc.CallOption) (*MsgDeleteExchangeRateResponse, error) {
	out := new(MsgDeleteExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/buchain.exchange.Msg/DeleteExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	ExchangeToken(context.Context, *MsgExchangeToken) (*MsgExchangeTokenResponse, error)
	CreateExchangeRate(context.Context, *MsgCreateExchangeRate) (*MsgCreateExchangeRateResponse, error)
	UpdateExchangeRate(context.Context, *MsgUpdateExchangeRate) (*MsgUpdateExchangeRateResponse, error)
	DeleteExchangeRate(context.Context, *MsgDeleteExchangeRate) (*MsgDeleteExchangeRateResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ExchangeToken(ctx context.Context, req *MsgExchangeToken) (*MsgExchangeTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeToken not implemented")
}
func (*UnimplementedMsgServer) CreateExchangeRate(ctx context.Context, req *MsgCreateExchangeRate) (*MsgCreateExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExchangeRate not implemented")
}
func (*UnimplementedMsgServer) UpdateExchangeRate(ctx context.Context, req *MsgUpdateExchangeRate) (*MsgUpdateExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExchangeRate not implemented")
}
func (*UnimplementedMsgServer) DeleteExchangeRate(ctx context.Context, req *MsgDeleteExchangeRate) (*MsgDeleteExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExchangeRate not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ExchangeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExchangeToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExchangeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buchain.exchange.Msg/ExchangeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExchangeToken(ctx, req.(*MsgExchangeToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateExchangeRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buchain.exchange.Msg/CreateExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateExchangeRate(ctx, req.(*MsgCreateExchangeRate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateExchangeRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buchain.exchange.Msg/UpdateExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateExchangeRate(ctx, req.(*MsgUpdateExchangeRate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteExchangeRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buchain.exchange.Msg/DeleteExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteExchangeRate(ctx, req.(*MsgDeleteExchangeRate))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "buchain.exchange.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExchangeToken",
			Handler:    _Msg_ExchangeToken_Handler,
		},
		{
			MethodName: "CreateExchangeRate",
			Handler:    _Msg_CreateExchangeRate_Handler,
		},
		{
			MethodName: "UpdateExchangeRate",
			Handler:    _Msg_UpdateExchangeRate_Handler,
		},
		{
			MethodName: "DeleteExchangeRate",
			Handler:    _Msg_DeleteExchangeRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "buchain/exchange/tx.proto",
}

func (m *MsgExchangeToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExchangeToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExchangeToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExchangeToken) > 0 {
		i -= len(m.ExchangeToken)
		copy(dAtA[i:], m.ExchangeToken)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExchangeToken)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExchangeTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExchangeTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExchangeTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateExchangeRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateExchangeRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateExchangeRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Multiplier != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Multiplier))
		i--
		dAtA[i] = 0x20
	}
	if m.Rate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Rate))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateExchangeRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateExchangeRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateExchangeRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateExchangeRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateExchangeRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateExchangeRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Multiplier != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Multiplier))
		i--
		dAtA[i] = 0x20
	}
	if m.Rate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Rate))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateExchangeRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateExchangeRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateExchangeRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteExchangeRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteExchangeRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteExchangeRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteExchangeRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteExchangeRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteExchangeRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgExchangeToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExchangeToken)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgExchangeTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateExchangeRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Rate != 0 {
		n += 1 + sovTx(uint64(m.Rate))
	}
	if m.Multiplier != 0 {
		n += 1 + sovTx(uint64(m.Multiplier))
	}
	return n
}

func (m *MsgCreateExchangeRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateExchangeRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Rate != 0 {
		n += 1 + sovTx(uint64(m.Rate))
	}
	if m.Multiplier != 0 {
		n += 1 + sovTx(uint64(m.Multiplier))
	}
	return n
}

func (m *MsgUpdateExchangeRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteExchangeRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteExchangeRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgExchangeToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExchangeToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExchangeToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExchangeTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExchangeTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExchangeTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateExchangeRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateExchangeRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateExchangeRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
			}
			m.Multiplier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Multiplier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateExchangeRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateExchangeRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateExchangeRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateExchangeRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateExchangeRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateExchangeRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
			}
			m.Multiplier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Multiplier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateExchangeRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateExchangeRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateExchangeRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteExchangeRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteExchangeRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteExchangeRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteExchangeRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteExchangeRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteExchangeRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
